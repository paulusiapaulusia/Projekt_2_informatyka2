# -*- coding: utf-8 -*-
"""
/***************************************************************************
 geo_calculationsDialog
                                 A QGIS plugin
 This plugin allows  to calculate the height of points and field
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-05
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Paula Domarecka Emilia Brytan
        email                : 01179125@pw.edu.pl 01179109@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.core import QgsPointXY
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsMessageLog, Qgis
import numpy as np
from qgis.core import QgsProject, QgsPointXY
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'geo_calculations_dialog_base.ui'))


class geo_calculationsDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(geo_calculationsDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.wysokoscButton.clicked.connect(self.calculate_dh)
        self.PushButton_pole.clicked.connect(self.calculate_pole)       

    def calculate_dh(self):
        selected_layer=self.mMapLayerComboBox.currentLayer()
        if selected_layer is None:
            iface.messageBar().pushMessage("Różnica wysokosci", 'Nie wybrano aktywnej warstwy', level = Qgis.Warning)
            return
        
        features=selected_layer.selectedFeatures()
        if len(features) != 2:
            iface.messageBar().pushMessage("Różnica wysokosci", 'Aby policzyć wysokosc wybierz DWA PUNKTY', level = Qgis.Warning)
            return
        
        h_1=float(features[0]['wysokosc'])
        h_2=float(features[1]['wysokosc'])
        dh=h_2-h_1
        self.label_dh_result.setText(f'{dh} m')
        QgsMessageLog.logMessage('Różnica wysokości między wybranymi punktami wynosi:' +str(dh) +'m', level = Qgis.Success)
        
        iface.messageBar().pushMessage("Różnica wysokosci", 'Różnica wysokości między wybranymi punktami została policzona', level = Qgis.Success)

    def calculate_pole(self):
        selected_layer=self.mMapLayerComboBox.currentLayer()
        obiekty = selected_layer.selectedFeatures()
        punkty = []
        for o in obiekty:
            x = float(o.geometry().asPoint().x())
            y = float(o.geometry().asPoint().y())
            p = QgsPointXY(x, y)
            punkty.append(p)
            
        if len(obiekty)<3:
            iface.messageBar().pushMessage("Pole powierzchni", 'Aby policzyć pole powierzchni wybierz co najmniej TRZY PUNKTY', level = Qgis.Warning)
            return
            
        if len(obiekty)>2:

            pole = 0
            dl = len(punkty)
            for e in range(dl):
                a = (e + 1) % dl
                pole += (punkty[a].x() + punkty[e].x()) * (punkty[a].y() - punkty[e].y())

            pole /= 2
            pole = round(abs(pole/10000), 3)
            
            pole = self.label_pole.setText(str(pole) +'ha')

            QgsMessageLog.logMessage(f'Pole powierzchni między wybranymi punktami wynosi: {pole} ha', level=Qgis.Success)

            iface.messageBar().pushMessage("Pole powierzchni", f'Pole powierzchni między wybranymi punktami wynosi: {pole} ha', level=Qgis.Success)